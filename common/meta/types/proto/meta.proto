// Copyright 2021 Datafuse Labs.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package meta;

import "request.proto";

message Empty {}
message RaftGetRequest { string key = 1; }

message RaftGetReply {
  bool ok = 1;
  string value = 2;
}

message RaftRequest {
  string data = 1;
}

message RaftReply {
  string data = 1;
  string error = 2;
}

message HandshakeRequest {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message HandshakeResponse {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

// Data chunk for export/import meta data
message ExportedChunk {
  repeated string data = 10;
}

message WatchRequest {
  // key is the key to register for watching.
  string key = 1;

  // key_end is the end of the range [key, key_end] to watch.
  // if key_end is None, then watch only key.
  optional string key_end = 2;

  enum FilterType {
    // recv all kind update event.
    ALL = 0;    
    // filter only update event.
    UPDATE = 1;
    // filter only delete event.
    DELETE = 2;
  }  
  FilterType filter_type = 3;
}

message Event {
  string key = 1;

  // current hold current value of key(if any)
  optional SeqV current = 2;

  // prev value of key(if any)
  optional SeqV prev = 3;
}

message WatchResponse {
  Event event = 1;
}

// messages for txn
message TxnCondition {
  // compare target enum
  enum ConditionTarget {
    Key = 0;
    Value = 1;
  }

  // condition result
  enum ConditionResult {
    // only used for key compare
    Exist = 0;
    NotExist = 1;

    // only used for value compare
    Equal = 2;
    Greater = 3;
    Less = 4;
    NotEqual = 5;    
  }

  TxnKey key = 1;
  ConditionTarget target = 2;

  optional SeqV value = 3;

  // the expected result of condition, if `expected` match the condition result,
  // then the `if_then` op will be executed, otherwise `else_then` op will be executed.
  ConditionResult expected = 4;
}

message TxnOp {
  oneof request {
    GetRequest get = 1;
    PutRequest put = 2;
    DeleteRequest delete = 3;
  }
}

message TxnOpResponse {
  oneof response {
    GetResponse get = 1;
    PutResponse put = 2;
    DeleteResponse delete = 3;
  }
}

message TxnRequest {
  TxnCondition cond = 1;

  // if condition returns true, then the `if_then` op will be executed, 
  // otherwise `else_then` op will be executed.  
  repeated TxnOp if_then = 2;

  repeated TxnOp else_then = 3;
}

message TxnReply {
  bool success = 1;
  repeated TxnOpResponse responses = 2;
}

service RaftService {

  rpc Write(RaftRequest) returns (RaftReply) {}
  rpc Get(RaftGetRequest) returns (RaftGetReply) {}

  /// Forward a request to other
  rpc Forward(RaftRequest) returns (RaftReply) {}

  // raft RPC

  rpc AppendEntries(RaftRequest) returns (RaftReply);
  rpc InstallSnapshot(RaftRequest) returns (RaftReply);
  rpc Vote(RaftRequest) returns (RaftReply);
}

service MetaService {
  // handshake
  rpc Handshake(stream HandshakeRequest) returns (stream HandshakeResponse);

  // message
  rpc WriteMsg(RaftRequest) returns (RaftReply);
  rpc ReadMsg(RaftRequest) returns (RaftReply);

  // Export all meta data.
  //
  // Including raft hard state, logs and state machine.
  // The exported data is a list of json strings in form of `(tree_name, sub_tree_prefix, key, value)`.
  rpc Export(Empty) returns (stream ExportedChunk);

  // Add watch key stream.
  // Whenever the watch key data updated, client will be notified accross the stream.
  rpc Watch(WatchRequest) returns (stream WatchResponse);

  rpc Transaction(TxnRequest) returns (TxnReply);
}
